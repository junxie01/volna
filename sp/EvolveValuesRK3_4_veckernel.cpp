//
// auto-generated by op2.py
//

//user function
inline void EvolveValuesRK3_4(const float *dT, const float *midPointConservative3, //OP_READ
            const float *Conservative, //OP_READ //temp
            float *values_new) //OP_WRITE
{
  //call to ToConservativeVariables inlined
  values_new[0] = Conservative[0] + (0.5f)* *dT * midPointConservative3[0];
  values_new[1] = Conservative[1] + (0.5f)* *dT * midPointConservative3[1];
  values_new[2] = Conservative[2] + (0.5f)* *dT * midPointConservative3[2];
  values_new[3] = Conservative[3];

  values_new[0] = values_new[0] < EPS ? EPS : values_new[0];
  //call to ToPhysicalVariables inlined
  float TruncatedH = values_new[0] < EPS ? EPS : values_new[0];
  values_new[0] = values_new[0];
  values_new[1] = values_new[1] / TruncatedH;
  values_new[2] = values_new[2] / TruncatedH;
  values_new[3] = values_new[3];
}

// host stub function
void op_par_loop_EvolveValuesRK3_4(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  int nargs = 4;
  op_arg args[4];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  //create aligned pointers for dats
  ALIGNED_float const float * __restrict__ ptr1 = (float *) arg1.data;
  __assume_aligned(ptr1,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr2 = (float *) arg2.data;
  __assume_aligned(ptr2,float_ALIGN);
  ALIGNED_float       float * __restrict__ ptr3 = (float *) arg3.data;
  __assume_aligned(ptr3,float_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  EvolveValuesRK3_4");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        EvolveValuesRK3_4(
          (float*)arg0.data,
          &(ptr1)[4 * (n+i)],
          &(ptr2)[4 * (n+i)],
          &(ptr3)[4 * (n+i)]);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
    }
    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      EvolveValuesRK3_4(
        (float*)arg0.data,
        &(ptr1)[4*n],
        &(ptr2)[4*n],
        &(ptr3)[4*n]);
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
  OP_kernels[3].transfer += (float)set->size * arg1.size;
  OP_kernels[3].transfer += (float)set->size * arg2.size;
  OP_kernels[3].transfer += (float)set->size * arg3.size * 2.0f;
}
