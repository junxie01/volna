//
// auto-generated by op2.py
//

//user function
inline void values_operation2(float *values, const int *result, const int *left, const int *right, const int *op) {
  switch (*op) {
  case 0:
    values[*result] = values[*left] + values[*right];
    break;
  case 1:
    values[*result] = values[*left] - values[*right];
    break;
  case 2:
    values[*result] = values[*left] * values[*right];
    break;
  case 3:
    values[*result] = values[*left] / values[*right];
    break;
  }
}

// host stub function
void op_par_loop_values_operation2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  //create aligned pointers for dats
  ALIGNED_float       float * __restrict__ ptr0 = (float *) arg0.data;
  __assume_aligned(ptr0,float_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(18);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  values_operation2");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        values_operation2(
          &(ptr0)[4 * (n+i)],
          (int*)arg1.data,
          (int*)arg2.data,
          (int*)arg3.data,
          (int*)arg4.data);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
    }
    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      values_operation2(
        &(ptr0)[4*n],
        (int*)arg1.data,
        (int*)arg2.data,
        (int*)arg3.data,
        (int*)arg4.data);
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[18].name      = name;
  OP_kernels[18].count    += 1;
  OP_kernels[18].time     += wall_t2 - wall_t1;
  OP_kernels[18].transfer += (float)set->size * arg0.size * 2.0f;
}
