//
// auto-generated by op2.py
//

//user function
inline void initBore_select(float *values, const float *center,
                     const float *x0,
                     const float *Hl,
                     const float *ul,
                     const float *vl,
                     const float *Hr,
                     const float *ur,
                     const float *vr) {
  values[0] = center[0] < *x0 ? *Hl : *Hr;
  values[1] = center[0] < *x0 ? *ul : *ur;
  values[2] = center[0] < *x0 ? *vl : *vr;
}

// host stub function
void op_par_loop_initBore_select(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8){

  int nargs = 9;
  op_arg args[9];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  //create aligned pointers for dats
  ALIGNED_float       float * __restrict__ ptr0 = (float *) arg0.data;
  __assume_aligned(ptr0,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr1 = (float *) arg1.data;
  __assume_aligned(ptr1,float_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(24);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  initBore_select");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        initBore_select(
          &(ptr0)[4 * (n+i)],
          &(ptr1)[2 * (n+i)],
          &dat2[i],
          &dat3[i],
          &dat4[i],
          &dat5[i],
          &dat6[i],
          &dat7[i],
          &dat8[i]);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
    }
    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      initBore_select(
        &(ptr0)[4*n],
        &(ptr1)[2*n],
        (float*)arg2.data,
        (float*)arg3.data,
        (float*)arg4.data,
        (float*)arg5.data,
        (float*)arg6.data,
        (float*)arg7.data,
        (float*)arg8.data);
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[24].name      = name;
  OP_kernels[24].count    += 1;
  OP_kernels[24].time     += wall_t2 - wall_t1;
  OP_kernels[24].transfer += (float)set->size * arg0.size * 2.0f;
  OP_kernels[24].transfer += (float)set->size * arg1.size;
}
