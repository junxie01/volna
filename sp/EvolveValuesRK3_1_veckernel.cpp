//
// auto-generated by op2.py
//

//user function
inline void EvolveValuesRK3_1(const float *dT, const float *midPointConservative, //OP_RW //temp
            const float *in, //OP_READ
            float *Conservative, //OP_WRITE //temp
            float *midPoint) //OP_WRITE
{
  //call to ToConservativeVariables inlined
  Conservative[0] = in[0] + (0.5f)* *dT * midPointConservative[0];
  Conservative[1] = (in[0] * in[1]) + (0.5f)* *dT * midPointConservative[1];
  Conservative[2] = (in[0] * in[2]) + (0.5f)* *dT * midPointConservative[2];
  Conservative[3] = in[3]; 
  
  Conservative[0] = Conservative[0] <= EPS ? EPS : Conservative[0];
  //call to ToPhysicalVariables inlined
  float TruncatedH = Conservative[0] < EPS ? EPS : Conservative[0];
  midPoint[0] = Conservative[0];
  midPoint[1] = Conservative[1] / TruncatedH;
  midPoint[2] = Conservative[2] / TruncatedH;
  midPoint[3] = Conservative[3];
}

// host stub function
void op_par_loop_EvolveValuesRK3_1(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  //create aligned pointers for dats
  ALIGNED_float const float * __restrict__ ptr1 = (float *) arg1.data;
  __assume_aligned(ptr1,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr2 = (float *) arg2.data;
  __assume_aligned(ptr2,float_ALIGN);
  ALIGNED_float       float * __restrict__ ptr3 = (float *) arg3.data;
  __assume_aligned(ptr3,float_ALIGN);
  ALIGNED_float       float * __restrict__ ptr4 = (float *) arg4.data;
  __assume_aligned(ptr4,float_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  EvolveValuesRK3_1");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        EvolveValuesRK3_1(
          &dat0[i],
          &(ptr1)[4 * (n+i)],
          &(ptr2)[4 * (n+i)],
          &(ptr3)[4 * (n+i)],
          &(ptr4)[4 * (n+i)]);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
    }
    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      EvolveValuesRK3_1(
        (float*)arg0.data,
        &(ptr1)[4*n],
        &(ptr2)[4*n],
        &(ptr3)[4*n],
        &(ptr4)[4*n]);
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;
  OP_kernels[0].time     += wall_t2 - wall_t1;
  OP_kernels[0].transfer += (float)set->size * arg1.size;
  OP_kernels[0].transfer += (float)set->size * arg2.size;
  OP_kernels[0].transfer += (float)set->size * arg3.size * 2.0f;
  OP_kernels[0].transfer += (float)set->size * arg4.size * 2.0f;
}
