//
// auto-generated by op2.py
//

//user function
__device__ void initBathymetry_large_gpu( float *values, const float *cellCenter,
 const float *node0, const float *node1, const float *node2,
 const float *bathy0, const float *bathy1, const float *bathy2) {

 bool isInside = false;


 float xmin = MIN(MIN(node0[0], node1[0]), node2[0]);
 float xmax = MAX(MAX(node0[0], node1[0]), node2[0]);
 float ymin = MIN(MIN(node0[1], node1[1]), node2[1]);
 float ymax = MAX(MAX(node0[1], node1[1]), node2[1]);

 if ( ( cellCenter[0] < xmin ) || ( cellCenter[0] > xmax ) ||
  ( cellCenter[1] < ymin ) || ( cellCenter[1] > ymax ) ) {
  isInside = false;
 }else{


  float insider = 1.0f;
  float p[2] = {cellCenter[0], cellCenter[1]};

    if ( (node0[0] - node2[0]) * (node1[1] - node2[1]) - (node0[1] - node2[1]) * (node1[0] - node2[0]) > 0 ) {
     insider = (node0[0] - node2[0]) * (p[1] - node2[1]) - (node0[1] - node2[1]) * (p[0] - node2[0]);
     insider *= (node0[0] - p[0]) * (node1[1] - p[1]) - (node0[1] - p[1]) * (node1[0] - p[0]);
     insider *= (node1[0] - p[0]) * (node2[1] - p[1]) - (node1[1] - p[1]) * (node2[0] - p[0]);
    }
    else {
     insider = (node0[0] - node1[0]) * (p[1] - node1[1]) - (node0[1] - node1[1]) * (p[0] - node1[0]);
     insider *= (node0[0] - p[0]) * (node2[1] - p[1]) - (node0[1] - p[1]) * (node2[0] - p[0]);
     insider *= (node2[0] - p[0]) * (node1[1] - p[1]) - (node2[1] - p[1]) * (node1[0] - p[0]);
    }
    isInside = insider >= 0.0f;
 }

  if (isInside) {

    float a = (node1[1]-node0[1])*(*bathy2-*bathy0)-(node2[1]-node0[1])*(*bathy1-*bathy0);
    float b = -(node1[0]-node0[0])*(*bathy2-*bathy0)+(node2[0]-node0[0])*(*bathy1-*bathy0);
    float c = (node1[0]-node0[0])*(node2[1]-node0[1])-(node2[0]-node0[0])*(node1[1]-node0[1]);

    values[3] += *bathy0 - (a*(cellCenter[0]-node0[0]) + b*(cellCenter[1]-node0[1]))/c;
  }
}

// CUDA kernel function
__global__ void op_cuda_initBathymetry_large(
  float *__restrict ind_arg0,
  const float *__restrict ind_arg1,
  const float *__restrict ind_arg2,
  const float *__restrict ind_arg3,
  const int *__restrict opDat0Map,
  const int *__restrict opDat2Map,
  int    block_offset,
  int   *blkmap,
  int   *offset,
  int   *nelems,
  int   *ncolors,
  int   *colors,
  int   nblocks,
  int   set_size) {
  float arg0_l[4];

  __shared__ int    nelems2, ncolor;
  __shared__ int    nelem, offset_b;

  extern __shared__ char shared[];

  if (blockIdx.x+blockIdx.y*gridDim.x >= nblocks) {
    return;
  }
  if (threadIdx.x==0) {

    //get sizes and shift pointers and direct-mapped data

    int blockId = blkmap[blockIdx.x + blockIdx.y*gridDim.x  + block_offset];

    nelem    = nelems[blockId];
    offset_b = offset[blockId];

    nelems2  = blockDim.x*(1+(nelem-1)/blockDim.x);
    ncolor   = ncolors[blockId];

  }
  __syncthreads(); // make sure all of above completed

  for ( int n=threadIdx.x; n<nelems2; n+=blockDim.x ){
    int col2 = -1;
    int map0idx;
    int map2idx;
    int map3idx;
    int map4idx;
    if (n<nelem) {
      //initialise local variables
      for ( int d=0; d<4; d++ ){
        arg0_l[d] = ZERO_float;
      }
      map0idx = opDat0Map[n + offset_b + set_size * 0];
      map2idx = opDat2Map[n + offset_b + set_size * 0];
      map3idx = opDat2Map[n + offset_b + set_size * 1];
      map4idx = opDat2Map[n + offset_b + set_size * 2];


      //user-supplied kernel call
      initBathymetry_large_gpu(arg0_l,
                         ind_arg1+map0idx*2,
                         ind_arg2+map2idx*2,
                         ind_arg2+map3idx*2,
                         ind_arg2+map4idx*2,
                         ind_arg3+map2idx*1,
                         ind_arg3+map3idx*1,
                         ind_arg3+map4idx*1);
      col2 = colors[n+offset_b];
    }

    //store local variables

    for ( int col=0; col<ncolor; col++ ){
      if (col2==col) {
        arg0_l[0] += ind_arg0[0+map0idx*4];
        arg0_l[1] += ind_arg0[1+map0idx*4];
        arg0_l[2] += ind_arg0[2+map0idx*4];
        arg0_l[3] += ind_arg0[3+map0idx*4];
        ind_arg0[0+map0idx*4] = arg0_l[0];
        ind_arg0[1+map0idx*4] = arg0_l[1];
        ind_arg0[2+map0idx*4] = arg0_l[2];
        ind_arg0[3+map0idx*4] = arg0_l[3];
      }
      __syncthreads();
    }
  }
}


//host stub function
void op_par_loop_initBathymetry_large(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(16);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[16].name      = name;
  OP_kernels[16].count    += 1;


  int    ninds   = 4;
  int    inds[8] = {0,1,2,2,2,3,3,3};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: initBathymetry_large\n");
  }

  //get plan
  #ifdef OP_PART_SIZE_16
    int part_size = OP_PART_SIZE_16;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    op_plan *Plan = op_plan_get(name,set,part_size,nargs,args,ninds,inds);

    //execute plan

    int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      #ifdef OP_BLOCK_SIZE_16
      int nthread = OP_BLOCK_SIZE_16;
      #else
      int nthread = OP_block_size;
      #endif

      dim3 nblocks = dim3(Plan->ncolblk[col] >= (1<<16) ? 65535 : Plan->ncolblk[col],
      Plan->ncolblk[col] >= (1<<16) ? (Plan->ncolblk[col]-1)/65535+1: 1, 1);
      if (Plan->ncolblk[col] > 0) {
        op_cuda_initBathymetry_large<<<nblocks,nthread>>>(
        (float *)arg0.data_d,
        (float *)arg1.data_d,
        (float *)arg2.data_d,
        (float *)arg5.data_d,
        arg0.map_data_d,
        arg2.map_data_d,
        block_offset,
        Plan->blkmap,
        Plan->offset,
        Plan->nelems,
        Plan->nthrcol,
        Plan->thrcol,
        Plan->ncolblk[col],
        set->size+set->exec_size);

      }
      block_offset += Plan->ncolblk[col];
    }
    OP_kernels[16].transfer  += Plan->transfer;
    OP_kernels[16].transfer2 += Plan->transfer2;
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[16].time     += wall_t2 - wall_t1;
}
