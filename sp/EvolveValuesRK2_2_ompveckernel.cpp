//
// auto-generated by op2.py
//

//user function
inline void EvolveValuesRK2_2(const float *dT, float *outConservative, //OP_RW, discard
            const float *inConservative, //OP_READ, discard
            const float *midPointConservative, //OP_READ, discard
            float *out) //OP_WRITE

{
  outConservative[0] = 0.5*(outConservative[0] * *dT + midPointConservative[0] + inConservative[0]);
  outConservative[1] = 0.5*(outConservative[1] * *dT + midPointConservative[1] + inConservative[1]);
  outConservative[2] = 0.5*(outConservative[2] * *dT + midPointConservative[2] + inConservative[2]);

  outConservative[0] = outConservative[0] <= EPS ? EPS : outConservative[0];
  outConservative[3] = inConservative[3];

  //call to ToPhysicalVariables inlined
  float TruncatedH = outConservative[0] < EPS ? EPS : outConservative[0];
  out[0] = outConservative[0];
  out[1] = outConservative[1] / TruncatedH;
  out[2] = outConservative[2] / TruncatedH;
  out[3] = outConservative[3];
}

// host stub function
void op_par_loop_EvolveValuesRK2_2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  //create aligned pointers for dats
  ALIGNED_float       float * __restrict__ ptr1 = (float *) arg1.data;
  __assume_aligned(ptr1,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr2 = (float *) arg2.data;
  __assume_aligned(ptr2,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr3 = (float *) arg3.data;
  __assume_aligned(ptr3,float_ALIGN);
  ALIGNED_float       float * __restrict__ ptr4 = (float *) arg4.data;
  __assume_aligned(ptr4,float_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(1);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  EvolveValuesRK2_2");
  }

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    #pragma omp parallel for
    for ( int n=0; n<(set_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      #pragma omp simd aligned(ptr1,ptr2,ptr3,ptr4)
      for ( int i=0; i<SIMD_VEC; i++ ){
        EvolveValuesRK2_2(
          (float*)arg0.data,
          &(ptr1)[4 * (n+i)],
          &(ptr2)[4 * (n+i)],
          &(ptr3)[4 * (n+i)],
          &(ptr4)[4 * (n+i)]);
      }
    }
    //remainder
    for ( int n=(set_size/SIMD_VEC)*SIMD_VEC; n<set_size; n++ ){
    #else
    #pragma omp parallel for simd aligned(ptr1,ptr2,ptr3,ptr4)
    for ( int n=0; n<set_size; n++ ){
    #endif
      EvolveValuesRK2_2(
        (float*)arg0.data,
        &(ptr1)[4*n],
        &(ptr2)[4*n],
        &(ptr3)[4*n],
        &(ptr4)[4*n]);
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[1].name      = name;
  OP_kernels[1].count    += 1;
  OP_kernels[1].time     += wall_t2 - wall_t1;
  OP_kernels[1].transfer += (float)set->size * arg1.size * 2.0f;
  OP_kernels[1].transfer += (float)set->size * arg2.size;
  OP_kernels[1].transfer += (float)set->size * arg3.size;
  OP_kernels[1].transfer += (float)set->size * arg4.size * 2.0f;
}
#undef VECTORIZE
