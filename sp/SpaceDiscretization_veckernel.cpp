//
// auto-generated by op2.py
//

//user function
inline void SpaceDiscretization(float *left, //OP_INC
              float *right, //OP_INC
              const float *cellLeft, const float *cellRight,
              const float *edgeFluxes, //OP_READ
              const float *bathySource, //OP_READ
              const float *edgeNormals, const int *isRightBoundary,
              const float *cellVolumes0, //OP_READ
              const float *cellVolumes1) //OP_READ)
{
  //Stop introducing Fluxes in dry cells.
  if ((cellLeft[0] > EPS) || (cellRight[0] > EPS)){
  left[0] -= (edgeFluxes[0])/cellVolumes0[0];
  left[1] -= (edgeFluxes[1] + bathySource[0] * edgeNormals[0])/cellVolumes0[0];
  left[2] -= (edgeFluxes[2] + bathySource[0] * edgeNormals[1])/cellVolumes0[0];
  // Added centered Source Term
  left[1] += (bathySource[2] *edgeNormals[0])/cellVolumes0[0];
  left[2] += (bathySource[2] *edgeNormals[1])/cellVolumes0[0];
  }else{
  left[0] -= 0.0f;
  left[0] -= 0.0f;
  left[0] -= 0.0f;
  }

  if (!isRightBoundary[0]) {
    if ((cellLeft[0] > EPS) || (cellRight[0] > EPS)){
    right[0] += edgeFluxes[0]/cellVolumes1[0];
    right[1] += (edgeFluxes[1] + bathySource[1] * edgeNormals[0])/cellVolumes1[0];
    right[2] += (edgeFluxes[2] + bathySource[1] * edgeNormals[1])/cellVolumes1[0];
    // Added centered Source Term
    right[1] -= (bathySource[3] *edgeNormals[0])/cellVolumes1[0];
    right[2] -= (bathySource[3] *edgeNormals[1])/cellVolumes1[0];
    }else{
    right[0] += 0.0f;
    right[1] += 0.0f;
    right[2] += 0.0f;
    }
  }
}
#ifdef VECTORIZE
//user function -- modified for vectorisation
void SpaceDiscretization_vec( float left[*][SIMD_VEC], float right[*][SIMD_VEC], const float cellLeft[*][SIMD_VEC], const float cellRight[*][SIMD_VEC], const float *edgeFluxes, const float *bathySource, const float *edgeNormals, const int *isRightBoundary, const float cellVolumes0[*][SIMD_VEC], const float cellVolumes1[*][SIMD_VEC], int idx ) {

  if ((cellLeft[0][idx] > EPS) || (cellRight[0][idx] > EPS)){
  left[0][idx] -= (edgeFluxes[0])/cellVolumes0[0][idx];
  left[1][idx] -= (edgeFluxes[1] + bathySource[0] * edgeNormals[0])/cellVolumes0[0][idx];
  left[2][idx] -= (edgeFluxes[2] + bathySource[0] * edgeNormals[1])/cellVolumes0[0][idx];

  left[1][idx] += (bathySource[2] *edgeNormals[0])/cellVolumes0[0][idx];
  left[2][idx] += (bathySource[2] *edgeNormals[1])/cellVolumes0[0][idx];
  }else{
  left[0][idx] -= 0.0f;
  left[0][idx] -= 0.0f;
  left[0][idx] -= 0.0f;
  }

  if (!isRightBoundary[0]) {
    if ((cellLeft[0][idx] > EPS) || (cellRight[0][idx] > EPS)){
    right[0][idx] += edgeFluxes[0]/cellVolumes1[0][idx];
    right[1][idx] += (edgeFluxes[1] + bathySource[1] * edgeNormals[0])/cellVolumes1[0][idx];
    right[2][idx] += (edgeFluxes[2] + bathySource[1] * edgeNormals[1])/cellVolumes1[0][idx];

    right[1][idx] -= (bathySource[3] *edgeNormals[0])/cellVolumes1[0][idx];
    right[2][idx] -= (bathySource[3] *edgeNormals[1])/cellVolumes1[0][idx];
    }else{
    right[0][idx] += 0.0f;
    right[1][idx] += 0.0f;
    right[2][idx] += 0.0f;
    }
  }
}
#endif

// host stub function
void op_par_loop_SpaceDiscretization(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9){

  int nargs = 10;
  op_arg args[10];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  //create aligned pointers for dats
  ALIGNED_float       float * __restrict__ ptr0 = (float *) arg0.data;
  __assume_aligned(ptr0,float_ALIGN);
  ALIGNED_float       float * __restrict__ ptr1 = (float *) arg1.data;
  __assume_aligned(ptr1,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr2 = (float *) arg2.data;
  __assume_aligned(ptr2,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr3 = (float *) arg3.data;
  __assume_aligned(ptr3,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr4 = (float *) arg4.data;
  __assume_aligned(ptr4,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr5 = (float *) arg5.data;
  __assume_aligned(ptr5,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr6 = (float *) arg6.data;
  __assume_aligned(ptr6,float_ALIGN);
  ALIGNED_int const int * __restrict__ ptr7 = (int *) arg7.data;
  __assume_aligned(ptr7,int_ALIGN);
  ALIGNED_float const float * __restrict__ ptr8 = (float *) arg8.data;
  __assume_aligned(ptr8,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr9 = (float *) arg9.data;
  __assume_aligned(ptr9,float_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(9);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: SpaceDiscretization\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      if (n+SIMD_VEC >= set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      ALIGNED_float float dat0[4][SIMD_VEC];
      ALIGNED_float float dat1[4][SIMD_VEC];
      ALIGNED_float float dat2[4][SIMD_VEC];
      ALIGNED_float float dat3[4][SIMD_VEC];
      ALIGNED_float float dat8[1][SIMD_VEC];
      ALIGNED_float float dat9[1][SIMD_VEC];
      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx2_4 = 4 * arg0.map_data[(n+i) * arg0.map->dim + 0];
        int idx3_4 = 4 * arg0.map_data[(n+i) * arg0.map->dim + 1];
        int idx8_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 0];
        int idx9_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 1];

        dat0[0][i] = 0.0;
        dat0[1][i] = 0.0;
        dat0[2][i] = 0.0;
        dat0[3][i] = 0.0;

        dat1[0][i] = 0.0;
        dat1[1][i] = 0.0;
        dat1[2][i] = 0.0;
        dat1[3][i] = 0.0;

        dat2[0][i] = (ptr2)[idx2_4 + 0];
        dat2[1][i] = (ptr2)[idx2_4 + 1];
        dat2[2][i] = (ptr2)[idx2_4 + 2];
        dat2[3][i] = (ptr2)[idx2_4 + 3];

        dat3[0][i] = (ptr3)[idx3_4 + 0];
        dat3[1][i] = (ptr3)[idx3_4 + 1];
        dat3[2][i] = (ptr3)[idx3_4 + 2];
        dat3[3][i] = (ptr3)[idx3_4 + 3];

        dat8[0][i] = (ptr8)[idx8_1 + 0];

        dat9[0][i] = (ptr9)[idx9_1 + 0];

      }
      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        SpaceDiscretization_vec(
          dat0,
          dat1,
          dat2,
          dat3,
          &(ptr4)[3 * (n+i)],
          &(ptr5)[4 * (n+i)],
          &(ptr6)[2 * (n+i)],
          &(ptr7)[1 * (n+i)],
          dat8,
          dat9,
          i);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx0_4 = 4 * arg0.map_data[(n+i) * arg0.map->dim + 0];
        int idx1_4 = 4 * arg0.map_data[(n+i) * arg0.map->dim + 1];

        (ptr0)[idx0_4 + 0] += dat0[0][i];
        (ptr0)[idx0_4 + 1] += dat0[1][i];
        (ptr0)[idx0_4 + 2] += dat0[2][i];
        (ptr0)[idx0_4 + 3] += dat0[3][i];

        (ptr1)[idx1_4 + 0] += dat1[0][i];
        (ptr1)[idx1_4 + 1] += dat1[1][i];
        (ptr1)[idx1_4 + 2] += dat1[2][i];
        (ptr1)[idx1_4 + 3] += dat1[3][i];

      }
    }

    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map0idx = arg0.map_data[n * arg0.map->dim + 0];
      int map1idx = arg0.map_data[n * arg0.map->dim + 1];

      SpaceDiscretization(
        &(ptr0)[4 * map0idx],
        &(ptr1)[4 * map1idx],
        &(ptr2)[4 * map0idx],
        &(ptr3)[4 * map1idx],
        &(ptr4)[3 * n],
        &(ptr5)[4 * n],
        &(ptr6)[2 * n],
        &(ptr7)[1 * n],
        &(ptr8)[1 * map0idx],
        &(ptr9)[1 * map1idx]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[9].name      = name;
  OP_kernels[9].count    += 1;
  OP_kernels[9].time     += wall_t2 - wall_t1;
  OP_kernels[9].transfer += (float)set->size * arg0.size * 2.0f;
  OP_kernels[9].transfer += (float)set->size * arg2.size;
  OP_kernels[9].transfer += (float)set->size * arg8.size;
  OP_kernels[9].transfer += (float)set->size * arg4.size;
  OP_kernels[9].transfer += (float)set->size * arg5.size;
  OP_kernels[9].transfer += (float)set->size * arg6.size;
  OP_kernels[9].transfer += (float)set->size * arg7.size;
  OP_kernels[9].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
