//
// auto-generated by op2.py
//

//user function
inline void computeFluxes(const float *cellLeft, const float *cellRight,
                                const float *edgeLength, const float *edgeNormals,
                                const int *isRightBoundary, //OP_READ
                                float *bathySource, float *out, //OP_WRITE
                                float *maxEdgeEigenvalues) //OP_WRITE
{
  //begin EdgesValuesFromCellValues
  float leftCellValues[4];
  float rightCellValues[4];
  float InterfaceBathy;
  leftCellValues[0] = cellLeft[0];
  leftCellValues[1] = cellLeft[1];
  leftCellValues[2] = cellLeft[2];
  leftCellValues[3] = cellLeft[3];
//  printf("%g %g %g %g\n", leftCellValues[0], leftCellValues[1], leftCellValues[2], leftCellValues[3]);
  if (!*isRightBoundary) {
    rightCellValues[0] = cellRight[0];
    rightCellValues[1] = cellRight[1];
    rightCellValues[2] = cellRight[2];
    rightCellValues[3] = cellRight[3];
//    printf("%g %g %g %g\n", rightCellValues[0], rightCellValues[1], rightCellValues[2], rightCellValues[3]);
  } else {
    rightCellValues[3] = cellLeft[3];
    float nx = edgeNormals[0];
    float ny = edgeNormals[1];
    float inNormalVelocity = cellLeft[1] * nx + cellLeft[2] * ny;
    float inTangentVelocity = -1.0f *  cellLeft[1] * ny + cellLeft[2] * nx;

    float outNormalVelocity = 0.0f;
    float outTangentVelocity = 0.0f;

    //WALL
    rightCellValues[0] = cellLeft[0];
    outNormalVelocity = -1.0f * inNormalVelocity;
    outTangentVelocity = inTangentVelocity;


    /* //HEIGHTSUBC
     rightCellValues[0] = -1.0 * rightCellValues[3];
     rightCellValues[0] += 0.1 * sin(10.0*t);
     outNormalVelocity = inNormalVelocity;
     outNormalVelocity +=
     2.0 * sqrt( g * cellLeft[0] );
     outNormalVelocity -=
     2.0 * sqrt( g * rightCellValues[0] );

     outTangentVelocity = inTangentVelocity;
     */ //end HEIGHTSUBC

    /* //FLOWSUBC
     outNormalVelocity = 1;

     //rightCellValues[0] = - rightCellValues[3];

     rightCellValues[0] = (inNormalVelocity - outNormalVelocity);
     rightCellValues[0] *= .5 / sqrt( g );

     rightCellValues[0] += sqrt( cellLeft[0] );

     outTangentVelocity = inTangentVelocity;
     */

    rightCellValues[1] = outNormalVelocity * nx - outTangentVelocity * ny;
    rightCellValues[2] = outNormalVelocity * ny + outTangentVelocity * nx;
//    printf("%g %g %g %g\n", rightCellValues[0], rightCellValues[1], rightCellValues[2], rightCellValues[3]);
  }

  InterfaceBathy = leftCellValues[3] > rightCellValues[3] ? leftCellValues[3] : rightCellValues[3];
  //SpaceDiscretization_1
  bathySource[0] = .5f * g * (leftCellValues[0]*leftCellValues[0]);
  bathySource[1] = .5f * g * (rightCellValues[0]*rightCellValues[0]);
  leftCellValues[0] = (leftCellValues[0] + leftCellValues[3] - InterfaceBathy);
  leftCellValues[0] = leftCellValues[0] > 0.0f ? leftCellValues[0] : 0.0f;
  rightCellValues[0] = (rightCellValues[0] + rightCellValues[3] - InterfaceBathy);
  rightCellValues[0] = rightCellValues[0] > 0.0f ? rightCellValues[0] : 0.0f;
  //NumericalFluxes_1
  bathySource[0] -= .5f * g * (leftCellValues[0]*leftCellValues[0]);
  bathySource[1] -= .5f * g * (rightCellValues[0]*rightCellValues[0]);
  bathySource[0] *= *edgeLength;
  bathySource[1] *= *edgeLength;
  float cL = sqrt(g * leftCellValues[0]);
  cL = cL > 0.0f ? cL : 0.0f;
  float cR = sqrt(g * rightCellValues[0]);
  cR = cR > 0.0f ? cR : 0.0f;

  float uLn = leftCellValues[1] * edgeNormals[0] + leftCellValues[2] * edgeNormals[1];
  float uRn = rightCellValues[1] * edgeNormals[0] + rightCellValues[2] * edgeNormals[1];

  //float unStar = 0.5f * (uLn + uRn) - 0.25f* (cL+cR);
  //float cStar = 0.5f * (cL + cR) - 0.25f* (uLn-uRn);
    
	float unStar = 0.5f * (uLn + uRn) + (cL-cR);
	float cStar = 0.5f * (cL + cR) - 0.25f* (uRn-uLn);
        
  float sL = (uLn - cL) < (unStar - cStar) ? (uLn - cL) : (unStar - cStar);
  float sLMinus = sL < 0.0f ? sL : 0.0f;

  float sR = (uRn + cR) > (unStar + cStar) ? (uRn + cR) : (unStar + cStar);
  float sRPlus = sR > 0.0f ? sR : 0.0f;

  sL = leftCellValues[0] < EPS ? uRn - 2.0f*cR : sL; // is this 2.0 or 2? (i.e. float/int)
  sR = leftCellValues[0] < EPS ? uRn + cR : sR;

  sR = rightCellValues[0] < EPS ? uLn + 2.0f*cL : sR; // is this 2.0 or 2? (i.e. float/int)
  sL = rightCellValues[0] < EPS ? uLn - cL : sL;

  float sRMinussL = sRPlus - sLMinus;
  sRMinussL = sRMinussL < EPS ? EPS : sRMinussL;

  float t1 = sRPlus / sRMinussL;
  //assert( ( 0 <= t1 ) && ( t1 <= 1 ) );

  float t2 = ( -1.0 * sLMinus ) / sRMinussL;
  //assert( ( 0 <= t2 ) && ( t2 <= 1 ) );

  float t3 = ( sRPlus * sLMinus ) / sRMinussL;

  float LeftFluxes_H, LeftFluxes_U, LeftFluxes_V;
  //inlined ProjectedPhysicalFluxes(leftCellValues, Normals, params, LeftFluxes);
  float HuDotN = (leftCellValues[0] * leftCellValues[1]) * edgeNormals[0] +
  (leftCellValues[0] * leftCellValues[2]) * edgeNormals[1];

  LeftFluxes_H = HuDotN;
  LeftFluxes_U = HuDotN * leftCellValues[1];
  LeftFluxes_V = HuDotN * leftCellValues[2];

  LeftFluxes_U += (.5f * g * edgeNormals[0] ) * ( leftCellValues[0] * leftCellValues[0] );
  LeftFluxes_V += (.5f * g * edgeNormals[1] ) * ( leftCellValues[0] * leftCellValues[0] );
  //end of inlined

  float RightFluxes_H, RightFluxes_U, RightFluxes_V;
  //inlined ProjectedPhysicalFluxes(rightCellValues, Normals, params, RightFluxes);
  HuDotN = (rightCellValues[0] * rightCellValues[1] * edgeNormals[0]) +
  (rightCellValues[0] * rightCellValues[2] * edgeNormals[1]);

  RightFluxes_H =   HuDotN;
  RightFluxes_U =   HuDotN * rightCellValues[1];
  RightFluxes_V =   HuDotN * rightCellValues[2];

  RightFluxes_U += (.5f * g * edgeNormals[0] ) * ( rightCellValues[0] * rightCellValues[0] );
  RightFluxes_V += (.5f * g * edgeNormals[1] ) * ( rightCellValues[0] * rightCellValues[0] );
  //end of inlined


  out[0] =
  ( t1 * LeftFluxes_H ) +
  ( t2 * RightFluxes_H ) +
  ( t3 * ( rightCellValues[0] - leftCellValues[0] ) );

  out[1] =
  ( t1 * LeftFluxes_U ) +
  ( t2 * RightFluxes_U ) +
  ( t3 * ( (rightCellValues[0] * rightCellValues[1]) -
          (leftCellValues[0] * leftCellValues[1]) ) );

  out[2] =
  ( t1 * LeftFluxes_V ) +
  ( t2 * RightFluxes_V ) +
  ( t3 * ( (rightCellValues[0] * rightCellValues[2]) -
          (leftCellValues[0] * leftCellValues[2]) ) );

  out[0] *= *edgeLength;
  out[1] *= *edgeLength;
  out[2] *= *edgeLength;
//  out[3] = 0.0;

  float maximum = fabs(uLn + cL);
  maximum = maximum > fabs(uLn - cL) ? maximum : fabs(uLn - cL);
  maximum = maximum > fabs(uRn + cR) ? maximum : fabs(uRn + cR);
  maximum = maximum > fabs(uRn - cR) ? maximum : fabs(uRn - cR);
  *maxEdgeEigenvalues = maximum;
}
#ifdef VECTORIZE
//user function -- modified for vectorisation
void computeFluxes_vec( const float cellLeft[*][SIMD_VEC], const float cellRight[*][SIMD_VEC], const float *edgeLength, const float *edgeNormals, const int *isRightBoundary, float *bathySource, float *out, float *maxEdgeEigenvalues, int idx ) {

  float leftCellValues[4];
  float rightCellValues[4];
  float InterfaceBathy;
  leftCellValues[0] = cellLeft[0][idx];
  leftCellValues[1] = cellLeft[1][idx];
  leftCellValues[2] = cellLeft[2][idx];
  leftCellValues[3] = cellLeft[3][idx];

  if (!*isRightBoundary) {
    rightCellValues[0] = cellRight[0][idx];
    rightCellValues[1] = cellRight[1][idx];
    rightCellValues[2] = cellRight[2][idx];
    rightCellValues[3] = cellRight[3][idx];

  } else {
    rightCellValues[3] = cellLeft[3][idx];
    float nx = edgeNormals[0];
    float ny = edgeNormals[1];
    float inNormalVelocity = cellLeft[1][idx] * nx + cellLeft[2][idx] * ny;
    float inTangentVelocity = -1.0f *  cellLeft[1][idx] * ny + cellLeft[2][idx] * nx;

    float outNormalVelocity = 0.0f;
    float outTangentVelocity = 0.0f;

    rightCellValues[0] = cellLeft[0][idx];
    outNormalVelocity = -1.0f * inNormalVelocity;
    outTangentVelocity = inTangentVelocity;




    rightCellValues[1] = outNormalVelocity * nx - outTangentVelocity * ny;
    rightCellValues[2] = outNormalVelocity * ny + outTangentVelocity * nx;

  }

  InterfaceBathy = leftCellValues[3] > rightCellValues[3] ? leftCellValues[3] : rightCellValues[3];

  bathySource[0] = .5f * g * (leftCellValues[0]*leftCellValues[0]);
  bathySource[1] = .5f * g * (rightCellValues[0]*rightCellValues[0]);
  leftCellValues[0] = (leftCellValues[0] + leftCellValues[3] - InterfaceBathy);
  leftCellValues[0] = leftCellValues[0] > 0.0f ? leftCellValues[0] : 0.0f;
  rightCellValues[0] = (rightCellValues[0] + rightCellValues[3] - InterfaceBathy);
  rightCellValues[0] = rightCellValues[0] > 0.0f ? rightCellValues[0] : 0.0f;

  bathySource[0] -= .5f * g * (leftCellValues[0]*leftCellValues[0]);
  bathySource[1] -= .5f * g * (rightCellValues[0]*rightCellValues[0]);
  bathySource[0] *= *edgeLength;
  bathySource[1] *= *edgeLength;
  float cL = sqrt(g * leftCellValues[0]);
  cL = cL > 0.0f ? cL : 0.0f;
  float cR = sqrt(g * rightCellValues[0]);
  cR = cR > 0.0f ? cR : 0.0f;

  float uLn = leftCellValues[1] * edgeNormals[0] + leftCellValues[2] * edgeNormals[1];
  float uRn = rightCellValues[1] * edgeNormals[0] + rightCellValues[2] * edgeNormals[1];



	float unStar = 0.5f * (uLn + uRn) + (cL-cR);
	float cStar = 0.5f * (cL + cR) - 0.25f* (uRn-uLn);

  float sL = (uLn - cL) < (unStar - cStar) ? (uLn - cL) : (unStar - cStar);
  float sLMinus = sL < 0.0f ? sL : 0.0f;

  float sR = (uRn + cR) > (unStar + cStar) ? (uRn + cR) : (unStar + cStar);
  float sRPlus = sR > 0.0f ? sR : 0.0f;

  sL = leftCellValues[0] < EPS ? uRn - 2.0f*cR : sL;
  sR = leftCellValues[0] < EPS ? uRn + cR : sR;

  sR = rightCellValues[0] < EPS ? uLn + 2.0f*cL : sR;
  sL = rightCellValues[0] < EPS ? uLn - cL : sL;

  float sRMinussL = sRPlus - sLMinus;
  sRMinussL = sRMinussL < EPS ? EPS : sRMinussL;

  float t1 = sRPlus / sRMinussL;


  float t2 = ( -1.0 * sLMinus ) / sRMinussL;


  float t3 = ( sRPlus * sLMinus ) / sRMinussL;

  float LeftFluxes_H, LeftFluxes_U, LeftFluxes_V;

  float HuDotN = (leftCellValues[0] * leftCellValues[1]) * edgeNormals[0] +
  (leftCellValues[0] * leftCellValues[2]) * edgeNormals[1];

  LeftFluxes_H = HuDotN;
  LeftFluxes_U = HuDotN * leftCellValues[1];
  LeftFluxes_V = HuDotN * leftCellValues[2];

  LeftFluxes_U += (.5f * g * edgeNormals[0] ) * ( leftCellValues[0] * leftCellValues[0] );
  LeftFluxes_V += (.5f * g * edgeNormals[1] ) * ( leftCellValues[0] * leftCellValues[0] );


  float RightFluxes_H, RightFluxes_U, RightFluxes_V;

  HuDotN = (rightCellValues[0] * rightCellValues[1] * edgeNormals[0]) +
  (rightCellValues[0] * rightCellValues[2] * edgeNormals[1]);

  RightFluxes_H =   HuDotN;
  RightFluxes_U =   HuDotN * rightCellValues[1];
  RightFluxes_V =   HuDotN * rightCellValues[2];

  RightFluxes_U += (.5f * g * edgeNormals[0] ) * ( rightCellValues[0] * rightCellValues[0] );
  RightFluxes_V += (.5f * g * edgeNormals[1] ) * ( rightCellValues[0] * rightCellValues[0] );


  out[0] =
  ( t1 * LeftFluxes_H ) +
  ( t2 * RightFluxes_H ) +
  ( t3 * ( rightCellValues[0] - leftCellValues[0] ) );

  out[1] =
  ( t1 * LeftFluxes_U ) +
  ( t2 * RightFluxes_U ) +
  ( t3 * ( (rightCellValues[0] * rightCellValues[1]) -
          (leftCellValues[0] * leftCellValues[1]) ) );

  out[2] =
  ( t1 * LeftFluxes_V ) +
  ( t2 * RightFluxes_V ) +
  ( t3 * ( (rightCellValues[0] * rightCellValues[2]) -
          (leftCellValues[0] * leftCellValues[2]) ) );

  out[0] *= *edgeLength;
  out[1] *= *edgeLength;
  out[2] *= *edgeLength;

  float maximum = fabs(uLn + cL);
  maximum = maximum > fabs(uLn - cL) ? maximum : fabs(uLn - cL);
  maximum = maximum > fabs(uRn + cR) ? maximum : fabs(uRn + cR);
  maximum = maximum > fabs(uRn - cR) ? maximum : fabs(uRn - cR);
  *maxEdgeEigenvalues = maximum;
}
#endif

// host stub function
void op_par_loop_computeFluxes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  //create aligned pointers for dats
  ALIGNED_float const float * __restrict__ ptr0 = (float *) arg0.data;
  __assume_aligned(ptr0,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr1 = (float *) arg1.data;
  __assume_aligned(ptr1,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr2 = (float *) arg2.data;
  __assume_aligned(ptr2,float_ALIGN);
  ALIGNED_float const float * __restrict__ ptr3 = (float *) arg3.data;
  __assume_aligned(ptr3,float_ALIGN);
  ALIGNED_int const int * __restrict__ ptr4 = (int *) arg4.data;
  __assume_aligned(ptr4,int_ALIGN);
  ALIGNED_float       float * __restrict__ ptr5 = (float *) arg5.data;
  __assume_aligned(ptr5,float_ALIGN);
  ALIGNED_float       float * __restrict__ ptr6 = (float *) arg6.data;
  __assume_aligned(ptr6,float_ALIGN);
  ALIGNED_float       float * __restrict__ ptr7 = (float *) arg7.data;
  __assume_aligned(ptr7,float_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);

  int  ninds   = 1;
  int  inds[8] = {0,0,-1,-1,-1,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: computeFluxes\n");
  }

  #ifdef OP_PART_SIZE_3
    int part_size = OP_PART_SIZE_3;
  #else
    int part_size = OP_part_size;
  #endif


  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set_size >0) {

    // get plan
    op_plan *Plan = op_plan_get_stage_upload(name,set,part_size,nargs,args,ninds,inds,OP_STAGE_ALL,0);

    // execute plan
    int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all(nargs, args);
      }
      int nblocks = Plan->ncolblk[col];

      #pragma omp parallel for
      for ( int blockIdx=0; blockIdx<nblocks; blockIdx++ ){
        int blockId  = Plan->blkmap[blockIdx + block_offset];
        int nelem    = Plan->nelems[blockId];
        int offset_b = Plan->offset[blockId];
        #ifdef VECTORIZE
        //peel left remainder
        for ( int n=offset_b; n<((offset_b-1)/SIMD_VEC+1)*SIMD_VEC; n++ ){
          int map0idx = arg0.map_data[n * arg0.map->dim + 0];
          int map1idx = arg0.map_data[n * arg0.map->dim + 1];

          computeFluxes(
            &(ptr0)[4 * map0idx],
            &(ptr1)[4 * map1idx],
            &(ptr2)[1 * n],
            &(ptr3)[2 * n],
            &(ptr4)[1 * n],
            &(ptr5)[2 * n],
            &(ptr6)[3 * n],
            &(ptr7)[1 * n]);
        }
        #pragma novector
        for ( int n=((offset_b-1)/SIMD_VEC+1)*SIMD_VEC; n<((offset_b+nelem)/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
          if (n+SIMD_VEC >= set->core_size) {
            op_mpi_wait_all(nargs, args);
          }
          ALIGNED_float float dat0[4][SIMD_VEC];
          ALIGNED_float float dat1[4][SIMD_VEC];
          #pragma omp simd aligned(ptr0,ptr1,ptr2,ptr3,ptr4,ptr5,ptr6,ptr7)
          for ( int i=0; i<SIMD_VEC; i++ ){
            int idx0_4 = 4 * arg0.map_data[(n+i) * arg0.map->dim + 0];
            int idx1_4 = 4 * arg0.map_data[(n+i) * arg0.map->dim + 1];

            dat0[0][i] = (ptr0)[idx0_4 + 0];
            dat0[1][i] = (ptr0)[idx0_4 + 1];
            dat0[2][i] = (ptr0)[idx0_4 + 2];
            dat0[3][i] = (ptr0)[idx0_4 + 3];

            dat1[0][i] = (ptr1)[idx1_4 + 0];
            dat1[1][i] = (ptr1)[idx1_4 + 1];
            dat1[2][i] = (ptr1)[idx1_4 + 2];
            dat1[3][i] = (ptr1)[idx1_4 + 3];

          }
          #pragma omp simd aligned(ptr0,ptr1,ptr2,ptr3,ptr4,ptr5,ptr6,ptr7)
          for ( int i=0; i<SIMD_VEC; i++ ){
            computeFluxes_vec(
              dat0,
              dat1,
              &(ptr2)[1 * (n+i)],
              &(ptr3)[2 * (n+i)],
              &(ptr4)[1 * (n+i)],
              &(ptr5)[2 * (n+i)],
              &(ptr6)[3 * (n+i)],
              &(ptr7)[1 * (n+i)],
              i);
          }
          for ( int i=0; i<SIMD_VEC; i++ ){

          }
        }

        //remainder
        for ( int n=((offset_b+nelem)/SIMD_VEC)*SIMD_VEC; n<offset_b+nelem; n++ ){
        #else
        #pragma omp simd aligned(ptr0,ptr1,ptr2,ptr3,ptr4,ptr5,ptr6,ptr7)
        for ( int n=offset_b; n<offset_b+nelem; n++ ){
        #endif
          int map0idx = arg0.map_data[n * arg0.map->dim + 0];
          int map1idx = arg0.map_data[n * arg0.map->dim + 1];

          computeFluxes(
            &(ptr0)[4 * map0idx],
            &(ptr1)[4 * map1idx],
            &(ptr2)[1 * n],
            &(ptr3)[2 * n],
            &(ptr4)[1 * n],
            &(ptr5)[2 * n],
            &(ptr6)[3 * n],
            &(ptr7)[1 * n]);
        }
      }
      block_offset += nblocks;
    }
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
  OP_kernels[3].transfer += (float)set->size * arg0.size;
  OP_kernels[3].transfer += (float)set->size * arg2.size;
  OP_kernels[3].transfer += (float)set->size * arg3.size;
  OP_kernels[3].transfer += (float)set->size * arg4.size;
  OP_kernels[3].transfer += (float)set->size * arg5.size;
  OP_kernels[3].transfer += (float)set->size * arg6.size;
  OP_kernels[3].transfer += (float)set->size * arg7.size;
  OP_kernels[3].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
#undef VECTORIZE
